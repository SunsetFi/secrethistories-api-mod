namespace SHRestAPI.Tasks
{
    using System;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Timeouts and delays.
    /// </summary>
    public static class RealtimeDelay
    {
        /// <summary>
        /// Creates a delay of the given time span.
        /// </summary>
        /// <param name="timeSpan">The timespan.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A task delayed by the given time span.</returns>
        public static Task Of(TimeSpan timeSpan, CancellationToken cancellationToken)
        {
            return Of(timeSpan.TotalMilliseconds, cancellationToken);
        }

        /// <summary>
        /// Creates a delay of the given milliseconds.
        /// </summary>
        /// <param name="milliseconds">The delay.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A task delayed by the given delay.</returns>
        public static Task Of(double milliseconds, CancellationToken cancellationToken)
        {
            var then = DateTime.Now + TimeSpan.FromMilliseconds(milliseconds);
            return AwaitConditionTask.From(() => DateTime.Now >= then, cancellationToken);
        }

        /// <summary>
        /// Wraps the given task in a timeout.
        /// If the timeout is reached before the task completes, the task is cancelled and the task resolves to a TimeoutException error.
        /// </summary>
        /// <typeparam name="T">The return type of the task.</typeparam>
        /// <param name="func">The function generating the task to run.</param>
        /// <param name="timeout">The timeout to enforce.</param>
        /// <param name="cancellationToken">A cancellation token to cancel the task.</param>
        /// <returns>The task generated by the function with a timeout applied.</returns>
        /// <exception cref="TimeoutException">Returned by the task if the timeout is hit before the function task completes.</exception>
        public static async Task<T> Timeout<T>(Func<CancellationToken, Task<T>> func, TimeSpan timeout, CancellationToken cancellationToken)
        {
            var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);

            var task = func(cts.Token);
            var timeoutTask = Of(timeout, cts.Token);

            var completedTask = await Task.WhenAny(task, timeoutTask);

            // Cancel whatever task didn't complete.
            cts.Cancel();

            if (completedTask == task)
            {
                return await task;
            }
            else
            {
                throw new TimeoutException();
            }
        }

        /// <summary>
        /// Wraps the given task in a timeout.
        /// If the timeout is reached before the task completes, the task is cancelled and the task resolves to a TimeoutException error.
        /// </summary>
        /// <param name="func">The function generating the task to run.</param>
        /// <param name="timeout">The timeout to enforce.</param>
        /// <param name="cancellationToken">A cancellation token to cancel the task.</param>
        /// <returns>The task generated by the function with a timeout applied.</returns>
        /// <exception cref="TimeoutException">Returned by the task if the timeout is hit before the function task completes.</exception>
        public static async Task Timeout(Func<CancellationToken, Task> func, TimeSpan timeout, CancellationToken cancellationToken)
        {
            var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);

            var task = func(cts.Token);
            var timeoutTask = Of(timeout, cts.Token);

            var completedTask = await Task.WhenAny(task, timeoutTask);

            // Cancel whatever task didn't complete.
            cts.Cancel();

            if (completedTask == task)
            {
                await task;
            }
            else
            {
                throw new TimeoutException();
            }
        }
    }
}
