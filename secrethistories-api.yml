openapi: 3.0.3
info:
  title: Secret histories API
  description: |-
    This is an API for interacting with [Cultist Simulator](https://store.steampowered.com/app/718670/Cultist_Simulator/) and [Book of Hours](https://store.steampowered.com/app/1028310/BOOK_OF_HOURS/) remotely.
    A Web and NodeJS compatible api is provided [here](https://github.com/SunsetFi/secrethistories-api)
  version: 1.0.0
externalDocs:
    description: More information is available at the repository
    url: https://github.com/SunsetFi/secrethistories-api-mod
servers:
  - url: http://localhost:8081/api
    description: Your local computer.  Cultist Simulator or Book of Hours must be running with the mod installed.
tags:
  - name: Game State
    description: Deals with inspecting, serializing, and deserializing the game state as a whole.
  - name: Tokens
    description: Deals with listing, inspecting, and manipulating tokens (instances of elements).
  - name: Situations
    description: Deals with listing, inspecting, and manipulating ongoing situations (instances of verbs).
  - name: Spheres
    description: |-
      Spheres are the containers of the game.  They can contain
      tokens, which encompass everything in the game.
  - name: Tokens
    description: |-
      Tokens represent every active item in the game.  From cards, to verbs, to items found around the House, to rooms of the house itself.
  - name: Fucine Paths
    description: |-
      Requests that deal in Fucine Paths, allowing targeting of any token or sphere in the game.
  - name: Time
    description: Time, events, and the means of manipulating it
  - name: Character
    description: State information associated with the history of the game.
  - name: Compendium
    description: The game's core data, containing definitions of cards, attributes, elements, recipes, and everything else.
  - name: Book of Hours Exclusive
    description: |-
      These endpoints are only useful when targeting Book of Hours.
      They will not function in Cultist Simulator.
  - name: Cultist Simulator Exclusive
    description: |-
      These endpoints are only useful when targeting Cultist Simulator.
      They will not function in Book of Hours.
paths:
  # ByPathController
  /by-path/~/spheres:
    get:
      tags:
        - Fucine Paths
        - Spheres
      summary: Gets all spheres at the root level.
      responses:
        "200":
          description: Returns all spheres at the root level.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Sphere"
  /by-path/{path}:
    get:
      tags:
        - Fucine Paths
        - Spheres
        - Tokens
      summary: Gets the token or sphere at the given path
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to get.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      responses:
        "200":
          description: Returns the token or sphere at the given path
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ElementStack"
                  - $ref: "#/components/schemas/Situation"
                  - $ref: "#/components/schemas/ConnectedTerrain"
                  - $ref: "#/components/schemas/TerrainFeature"
                  - $ref: "#/components/schemas/Sphere"
    patch:
      tags:
        - Fucine Paths
        - Tokens
      summary: Updates the token at the given path
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to update.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/ElementStack"
                - $ref: "#/components/schemas/Situation"
                - $ref: "#/components/schemas/ConnectedTerrain"
                - $ref: "#/components/schemas/TerrainFeature"
                - $ref: "#/components/schemas/Sphere"
      responses:
        "200":
          description: The token or sphere has been updated.
        "400":
          description: The token or sphere could not be updated because the request body was invalid.
        "409":
          description: The token or sphere could not be updated because the requested value conflicts with the game state.
    delete:
      tags:
        - Fucine Paths
        - Spheres
        - Tokens
      summary: Deletes the token at the given path
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to delete.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      responses:
        "200":
          description: The token has been deleted.
        "400":
          description: The item at the given path is not an item that can be deleted, such as a Sphere.
  /by-path/{path}/icon.png:
    get:
      tags:
        - Fucine Paths
        - Tokens
      summary: Gets the icon for the token at the given path
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to get the icon for.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      responses:
        "200":
          description: Returns the icon for the token or sphere at the given path
          content:
            image/png:
              schema:
                type: string
                format: binary
        "400":
          description: The item at the given path is not an item that has an icon, such as a Sphere.
  /by-path/{path}/spheres:
    get:
      tags:
        - Fucine Paths
        - Spheres
      summary: Gets all spheres at the given path
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to get the spheres for.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      responses:
        "200":
          description: Returns all spheres at the given path
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Sphere"
        "400":
          description: The item at the given path is not an item that has spheres, such as another Sphere.
  /by-path/{path}/tokens:
    get:
      tags:
        - Fucine Paths
        - Tokens
      summary: Gets all tokens at the given path
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to get the tokens for.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      responses:
        "200":
          description: Returns all tokens at the given path
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/ElementStack"
                    - $ref: "#/components/schemas/Situation"
                    - $ref: "#/components/schemas/ConnectedTerrain"
                    - $ref: "#/components/schemas/TerrainFeature"
        "400":
          description: The item at the given path is not an item that has tokens, such as another Token.
    post:
      tags:
        - Fucine Paths
        - Tokens
      summary: Adds a token to the given path
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to add the token to.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    payloadType:
                      enum:
                        - ElementStack
                    elementId:
                      type: string
                    quantity:
                      type: integer
                    mutations:
                      type: object
                      additionalProperties:
                        type: integer
                  required:
                    - payloadType
                    - elementId
                - type: object
                  properties:
                    payloadType:
                      enum:
                        - Situation
                    verbId:
                      type: string
                    recipeId:
                      type: string
                  anyOf:
                    - required:
                      - verbId
                    - required:
                      - recipeId
      responses:
        "200":
          description: The token has been added.
        "400":
          description: The item at the given path is not an item that can have tokens added to it, such as a Token.
  /by-path/{path}/focus:
    post:
      tags:
        - Fucine Paths
        - Tokens
      summary: Focuses the camera on the token at the given path
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to focus.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      responses:
        "200":
          description: The token has been focused.
        "400":
          description: The item at the given path is not an item that can be focused, such as a Sphere.
  /by-path/{path}/evict:
    post:
      tags:
        - Fucine Paths
        - Tokens
      summary: Evicts the token at the given path from its sphere.
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token to evict.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      responses:
        "200":
          description: The token has been focused.
        "400":
          description: The item at the given path is not an item that can be evicted, such as a Sphere.
  /by-path/{path}/open:
    post:
      tags:
        - Fucine Paths
        - Tokens
      summary: Opens the UI window for the token at the given path
      description: |-
        If the token is a Situation, its situation window will be opened.
        If the token is a terrain (such as a Book of Hours room), it's unlock window will open.
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to open.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      responses:
        "200":
          description: The token has been opened.
        "400":
          description: The item at the given path is not an item that can be opened, such as a Sphere or ElementStack.
        "409":
          description: The item at the given path is openable, but not in a state where it can be opened.  This is the case for Terrains that have already been unlocked.
  /by-path/{path}/execute:
    post:
      tags:
        - Fucine Paths
        - Tokens
      summary: Executes the token at the given path
      description: |-
        If the token is a Situation, it will be executed.
        If the token is a terrain (such as a Book of Hours room), it's unlock recipe will attempt to start.
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to execute.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      responses:
        "200":
          description: The token has been executed.
        "400":
          description: The item at the given path is not an item that can be executed, such as a Sphere or ElementStack.
        "409":
          description: The item at the given path is executable, but not in a state where it can be executed.  This is the case for Terrains that have already been unlocked, or situations without a valid set of inputs.
  /by-path/{path}/conclude:
    post:
      tags:
        - Fucine Paths
        - Tokens
      summary: Concludes the token at the given path
      description: |-
        Conclusion is a situation-specific behavior where the contents of a completed situation are dumped to the board
        and the situation is reset for a new recipe.
        If the situation is spontanious, the situation will be deleted after its conclusion.
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to conclude.
            This should be an absolute fucine path starting at the root "~".
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      responses:
        "200":
          description: The token has been concluded.
        "400":
          description: The item at the given path is not an item that can be concluded, such as a Sphere or ElementStack.
        "409":
          description: The item at the given path is concludable, but not in a state where it can be concluded.  This is the case for situations that are not started or still ongoing.
  /by-path/{path}/unlock:
    post:
      tags:
        - Fucine Paths
        - Tokens
        - Book of Hours Exclusive
      summary: Unlocks the token at the given path
      description: |-
        This is only valid for locked terrains, such as the rooms of Hush House.
        If the token is already unlocked, this operation will do nothing.
      parameters:
        - name: path
          in: path
          required: true
          description: |-
            The path of the token or sphere to unlock.
            This should be an absolute fucine path starting at the root "~".
            This should be a path to a terrain, such as a room of Hush House.
            Due to OpenAPI limitations, this can only be documented with one path long.
            However, in practice, this path should include slashes ("/") to separate each sphere and token.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                instant:
                  type: boolean
                  description: If set, the unlock will be instant.  Otherwise, it will be done through the unlock recipe.
      responses:
        "200":
          description: The token has been unlocked.
  # CharacterController
  /character/legacy:
    get:
      tags:
        - Character
      summary: Gets the current legacy
      description: |-
        This is read-only.  Changing the legacy requires starting a new game.
        If you wish to start a new game with a new legacy, see
        `PUT /game-state/legacy`
      responses:
        "200": 
          description: Returns the current legacy
          content:
            application/json:
              schema:
                type: object
                properties:
                  legacyId:
                    type: string
                  legacyLabel:
                    type: string
  /character/elements-manifested:
    get:
      tags:
        - Character
      summary: Gets all unique elements manifested this game
      responses:
        "200":
          description: Returns all unique elements manifested this game
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /character/ambittable-recipes-unlocked:
    get:
      tags:
        - Character
        - Book of Hours Exclusive
      summary: Gets all recipes the player has unlocked through the crafting menu.
      description: |-
        This includes all recipes that are marked unlockable, and that the player has queued up
        when using the appropriate skill or source card.
      responses:
        "200":
          description: Returns all recipes the player has unlocked through the crafting menu.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /character/recipes-executed:
    get:
      tags:
        - Character
        - Cultist Simulator Exclusive
      summary: Gets a map of all executed recipes and the number of time they have executed.
      responses:
        "200":
          description: Returns a map of all executed recipes and the number of time they have executed.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
  # CompendiumController
  /compendium/elements:
    get:
      tags:
        - Compendium
      summary: Gets all elements in the game
      parameters:
        - name: isAspect
          in: query
          description: |-
            If true, only returns aspect elements.
            If false, only returns non-aspect elements.
            If not specified, returns all elements.
          schema:
            type: boolean
        - name: isHidden
          in: query
          description: |-
            If true, only returns hidden elements.
            If false, only returns non-hidden elements.
            If not specified, returns all elements.
          schema:
            type: boolean
      responses:
        "200":
          description: Returns all elements in the game
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Element"
  /compendium/elements/{elementId}:
    get:
      tags:
        - Compendium
      summary: Gets the element with the given id
      parameters:
        - name: elementId
          in: path
          required: true
          description: The id of the element to get
          schema:
            type: string
      responses:
        "200":
          description: Returns the element with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Element"
  /compendium/element/{elementId}/icon.png:
    get:
      tags:
        - Compendium
      summary: Gets the icon for the element with the given id
      parameters:
        - name: elementId
          in: path
          required: true
          description: The id of the element to get the icon for
          schema:
            type: string
      responses:
        "200":
          description: Returns the icon for the element with the given id
          content:
            image/png:
              schema:
                type: string
                format: binary
  /compendium/verbs:
    get:
      tags:
        - Compendium
      summary: Gets all verbs in the game
      responses:
        "200":
          description: Returns all verbs in the game
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Verb"
  /compendium/verbs/{verbId}:
    get:
      tags:
        - Compendium
      summary: Gets the verb with the given id
      parameters:
        - name: verbId
          in: path
          required: true
          description: The id of the verb to get
          schema:
            type: string
      responses:
        "200":
          description: Returns the verb with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Verb"
  /compendium/verbs/{verbId}/icon.png:
    get:
      tags:
        - Compendium
      summary: Gets the icon for the verb with the given id
      parameters:
        - name: verbId
          in: path
          required: true
          description: The id of the verb to get the icon for
          schema:
            type: string
      responses:
        "200":
          description: Returns the icon for the verb with the given id
          content:
            image/png:
              schema:
                type: string
                format: binary
  /compendium/recipes:
    get:
      tags:
        - Compendium
      summary: Gets all recipes in the game
      responses:
        "200":
          description: Returns all recipes in the game
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
  /compendium/recipes/{recipeId}:
    get:
      tags:
        - Compendium
      summary: Gets the recipe with the given id
      parameters:
        - name: recipeId
          in: path
          required: true
          description: The id of the recipe to get
          schema:
            type: string
      responses:
        "200":
          description: Returns the recipe with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
  # GameStateController
  /game-state:
    get:
      tags:
        - Game State
      summary: Gets the current game state
      responses:
        "200":
          description: Returns the current game state
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameState:
                    type: object
    put:
      tags:
        - Game State
      summary: Sets the current game state by doing a full game reset and reload into the provided state.
      description: |-
        This effectively follows the process of loading an existing save.  The current game state will be wiped
        and the game will start fresh from the provided state.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gameState:
                  type: object
      responses:
        "200":
          description: The game state has been set.
  /game-state/legacy:
    put:
      tags:
        - Game State
      summary: Starts a new game with the provided legacy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                legacyId:
                  type: string
      responses:
        "200":
          description: The specified legacy has been started.
  # SituationController
  /situations:
    get:
      tags:
        - Situations
      summary: Gets all situations in the game
      responses:
        "200":
          description: Returns all situations in the game
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Situation"
  /situations/{situationId}:
    get:
      tags:
        - Situations
      summary: Gets the situation with the given id
      parameters:
        - name: situationId
          in: path
          required: true
          description: The id of the situation to get
          schema:
            type: string
      responses:
        "200":
          description: Returns the situation with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Situation"
  # TimeController
  /time/speed:
    get:
      tags:
        - Time
      summary: Gets the current game speed
      responses:
        "200":
          description: Returns the current game speed
          content:
            application/json:
              schema:
                type: object
                properties:
                  speed:
                    type: string
                    description: The game speed to set
                    enum:
                      - Paused
                      - Normal
                      - Fast
                      - VeryFast
                      - VeryVeryFast
    post:
      tags:
        - Time
      summary: Sets the current game speed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                speed:
                  type: string
                  enum:
                    - Paused
                    - Normal
                    - Fast
                    - VeryFast
                    - VeryVeryFast
      responses:
        "200":
          description: The speed has been set.
  /time/beat:
    post:
      tags:
        - Time
      summary: Advances the game by the given time span
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                seconds:
                  type: number
                  description: The number of seconds to advance the game by
      responses:
        "200":
          description: The game time has been advanced.
  /time/events:
    get:
      tags:
        - Time
      summary: Gets the next set of pending game events
      responses:
        "200":
          description: Returns the next set of pending game events
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCardDecay:
                    type: number
                    description: The number of seconds until the next card decay
                  nextRecipeCompletion:
                    type: number
                    description: The number of seconds until the next recipe completion
  /time/events/beat:
    post:
      tags:
        - Time
      summary: Advances the game to the next event
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  enum:
                    - CardDecay
                    - RecipeCompletion
                    - Either
                  description: Specifies which event to advance to
      responses:
        "200":
          description: The game time has been advanced.
        "409":
          description: The game time could not be advanced because there are no pending events of the specified type.
  # TokensController
  /tokens:
    get:
      tags:
        - Tokens
      summary: Gets all tokens in the game
      parameters:
        - name: skip
          in: query
          description: The number of tokens to skip
          schema:
            type: integer
        - name: take
          in: query
          description: The number of tokens to take
          schema:
            type: integer
        - name: spherePrefix
          in: query
          description: |-
            If specified, only returns tokens in spheres with the given prefix.
            If not specified, returns tokens in all spheres.
          schema:
            type: string
        - name: payloadType
          in: query
          description: |-
            If specified, only returns tokens with the given payload type.
            If not specified, returns tokens with all payload types.
          schema:
            type: string
        - name: elementId
          in: query
          description: |-
            If specified, only returns element tokens with the given element id.
            If not specified, returns all tokens.
          schema:
            type: string
        - name: verbId
          in: query
          description: |-
            If specified, only returns situation tokens with the given verb id.
            If not specified, returns all tokens.
          schema:
            type: string
      responses:
        "200":
          description: Returns all matching tokens in the game
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/ElementStack"
                    - $ref: "#/components/schemas/Situation"
                    - $ref: "#/components/schemas/ConnectedTerrain"
                    - $ref: "#/components/schemas/TerrainFeature"
components:
  schemas:
    Sphere:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        path:
          type: string
          readOnly: true
        category:
          type: string
          readOnly: true
        shrouded:
          type: boolean
          readOnly: true
        label:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        consumes:
          type: boolean
          readOnly: true
        greedy:
          type: boolean
          readOnly: true
        essentialAspects:
          type: object
          readOnly: true
          additionalProperties:
            type: integer
        requiredAspects:
          type: object
          readOnly: true
          additionalProperties:
            type: integer
        forbiddenAspects:
          type: object
          readOnly: true
          additionalProperties:
            type: integer
    Token:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        path:
          type: string
          readOnly: true
        spherePath:
          type: string
        payloadType:
          type: string
          readOnly: true
    ElementStack:
      allOf:
        - $ref: "#/components/schemas/Token"
        - type: object
          properties:
            elementId:
              type: string
              readOnly: true
            quantity:
              type: integer
            lifetimeRemaining:
              type: number
              readOnly: true
            aspects:
              type: object
              readOnly: true
              additionalProperties:
                type: integer
            mutations:
              type: object
            shrouded:
              type: object
            label:
              type: string
              readOnly: true
            description:
              type: string
              readOnly: true
            icon:
              type: string
              readOnly: true
            uniquenessGroup:
              type: string
              readOnly: true
            decays:
              type: boolean
              readOnly: true
            metafictional:
              type: boolean
              readOnly: true
            unique:
              type: boolean
              readOnly: true
    Situation:
      allOf:
        - $ref: "#/components/schemas/Token"
        - type: object
          properties:
            verbId:
              type: string
              readOnly: true
            spontanious:
              type: boolean
              readOnly: true
            aspects:
              type: object
              readOnly: true
              additionalProperties:
                type: integer
            hints:
              type: object
              readOnly: true
            thresholds:
              # TODO: Document threshold object
              type: object
              readOnly: true
            timeRemaining:
              type: number
              readOnly: true
            recipeId:
              type: string
            recipeLabel:
              type: string
              readOnly: true
            currentRecipeId:
              type: string
              readOnly: true
            currentRecipeLabel:
              type: string
              readOnly: true
            state:
              type: string
              readOnly: true
            label:
              type: string
              readOnly: true
            description:
              type: string
              readOnly: true
            open:
              type: boolean
    TerrainFeature:
      type: object
      properties:
        label:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        aspects:
          type: object
          readOnly: true
          additionalProperties:
            type: integer
        sealed:
          type: boolean
        shrouded:
          type: boolean
        infoRecipeId:
          type: string
          readOnly: true
    ConnectedTerrain:
      allOf:
        - $ref: "#/components/schemas/TerrainFeature"
        - type: object
          properties:
            unlockRequirements:
              type: object
              readOnly: true
            unlockForbiddens:
              type: object
              readOnly: true
            unlockEssentials:
              type: object
              readOnly: true
    Element:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        aspects:
          type: object
          readOnly: true
          additionalProperties:
            type: integer
        burnTo:
          type: string
          readOnly: true
        comments:
          type: string
          readOnly: true
        commute:
          type: array
          readOnly: true
          items:
            type: string
            readOnly: true
        decays:
          type: boolean
          readOnly: true
        decayTo:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        icon:
          type: string
          readOnly: true
        inherits:
          type: string
          readOnly: true
        isApect:
          type: boolean
          readOnly: true
        isHidden:
          type: boolean
          readOnly: true
        label:
          type: string
          readOnly: true
        lever:
          type: string
          readOnly: true
        lifetime:
          type: number
          readOnly: true
        manifestationType:
          type: string
          readOnly: true
        metafictional:
          type: boolean
          readOnly: true
        noArtNeeded:
          type: boolean
          readOnly: true
        resaturate:
          type: boolean
          readOnly: true
        sort:
          type: string
          readOnly: true
        unique:
          type: boolean
          readOnly: true
        uniquenessGroup:
          type: string
          readOnly: true
        verbIcon:
          type: string
          readOnly: true
        xtriggers:
          $ref: "#/components/schemas/XTriggers"
        xexts:
          type: object
          readOnly: true
          additionalProperties:
            type: string
    Verb:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        label:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        icon:
          type: string
          readOnly: true
        category:
          type: string
          readOnly: true
        multiple:
          type: boolean
          readOnly: true
        spontanious:
          type: boolean
          readOnly: true
        thresholds:
          type: array
          items:
            $ref: "#/components/schemas/SphereSpec"
          readOnly: true
        aspects:
          type: object
          readOnly: true
          additionalProperties:
            type: integer
        hints:
          type: array
          items:
            type: string
          readOnly: true
        xtriggers:
          $ref: "#/components/schemas/XTriggers"
    Recipe:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        label:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        aspects:
          type: object
          readOnly: true
          additionalProperties:
            type: integer
        startLabel:
          type: string
          readOnly: true
        startDescription:
          type: string
          readOnly: true
        preSlots:
          type: array
          items:
            $ref: "#/components/schemas/SphereSpec"
          readOnly: true
        slots:
          type: array
          items:
            $ref: "#/components/schemas/SphereSpec"
          readOnly: true
        warmup:
          type: number
          readOnly: true
        requirements:
          type: object
          readOnly: true
          additionalProperties:
            type: string
        extantRequirements:
          type: object
          readOnly: true
          additionalProperties:
            type: string
        effects:
          type: object
          readOnly: true
          additionalProperties:
            type: string
    SphereSpec:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        label:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        greedy:
          type: boolean
          readOnly: true
        essential:
          type: object
          additionalProperties:
            type: integer
          readOnly: true
        required:
          type: object
          additionalProperties:
            type: integer
          readOnly: true
        forbidden:
          type: object
          additionalProperties:
            type: integer
          readOnly: true
    XTriggers:
      type: object
      readOnly: true
      additionalProperties:
        type: array
        readOnly: true
        items:
          type: object
          readOnly: true
          properties:
            id:
              type: string
              readOnly: true
            morpheffect:
              type: string
              readOnly: true
            level:
              type: integer
              readOnly: true
            chance:
              type: integer
              readOnly: true
            lever:
              type: string
              readOnly: true

